[tool.poetry]
name = "stations_station"
version = "0.1.3"
description = ""
authors = ["eightballer"]
readme = "README.md"
license = "Apache-2.0"
classifiers = [
    'License :: OSI Approved :: Apache Software License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]

[tool.poetry.dependencies]
python = "<3.12,>=3.9"
cython = "<3.0.0"
open-aea-ledger-solana = "==1.55.0"
open-aea-ledger-cosmos = "==1.55.0"
open-aea-ledger-ethereum = "==1.55.0"
open-aea-cli-ipfs = "==1.55.0"
open-aea-test-autonomy = "==0.15.2"
open-autonomy = "==0.15.2"
autonomy-dev = {version = "0.2.73", extras = ["all"]}
openapi-core = "==0.14.5"
aiohttp = "<4.0.0,>=3.8.5"
aioprometheus = "<21.0.0,>=20.0.0"
redis = {version = "<6", extras = ["all"]}
python-socketio = "5.9.0"


[tool.poetry.dev-dependencies]


[tool.poetry.extras]
dev = ["pre-commit", "virtualenv", "pip", "toml",]
doc = [
    "mkdocs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocs-material-extension",
    "mkdocs-autorefs",
]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0", "setuptools"]


[tool.ruff]
line-length = 120
indent-width = 4
fix = true
preview = false
show-fixes = false
respect-gitignore = true
exclude = []
output-format = "grouped"
target-version = "py311"
required-version = ">=0.3.2"


[tool.ruff.format]
indent-style = "space"
quote-style = "double"
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = 100
skip-magic-trailing-comma = false


[tool.ruff.lint]
preview = true
task-tags = [ "TODO", "FIXME",]
logger-objects = []
allowed-confusables = []
typing-modules = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = [ "ALL",]
unfixable = []
select = [ "F", "E", "W", "C90", "I", "N", "D", "UP", "YTT", "ANN", "ASYNC", "ASYNC1", "BLE", "FBT", "B", "A", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ICN", "G","S", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "TD", "FIX", "ERA", "PD", "PL", "TRY", "FLY", "NPY", "AIR", "PERF", "FURB", "LOG", "RUF",]
ignore = [ "D202", "D203", "D204", "D205", "D213", "D417", "ANN401","ANN201", "S404", "S602", "ANN202", "ANN204", "FBT001", "FBT002", "ANN001", "ANN002", "ANN003", "S101", "G004", "TRY301", "S603","S607", "FBT003", "PLR2004", "TRY300", "PTH123", "PTH118", "PERF401", "PERF403", "PERF403", "A002", "PLW2901", "PLC1901", "A004", "PLR0913", "PLR0917", "PTH120", "PTH100", "PTH120", "S105", "PLR6301", "PERF401", "PERF401", "PERF401", "PLC1901", "PLC1901", "PLC1901", "PLC1901", "PLC1901", "PYI024", "PYI024", "PLR6301", "PLW2901", "PLW2901", "PLW2901", "PLR6301", "PLR6301", "PLR6301", "PYI024", "PLR6301", "PLR6301", "PLR6301", "PLR6301", "PLR6301", "PLC1901", "PTH207", "PTH109", "PTH109", "PT011", "PLW0127", "PLW0128", "PLR6301", "PLR6301", "PLC1901", "PLC1901", "PT017", "D107", "N818", "ANN205", "FURB101", "FURB103", "ANN206", "D401", "S307", "TRY401", "D404", "S604", "RUF012"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true


[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-copyright]
notice-rgx = "(?i)Copyright\\s+((?:\\(C\\)|Â©)\\s+)?\\d{4}([-,]\\d{4})*"


[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"statsmodels.api" = "sm"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = [ "typing", "typing_extensions",]
runtime-evaluated-base-classes = [ "pydantic.BaseModel", "sqlalchemy.orm.DeclarativeBase",]
runtime-evaluated-decorators = [ "pydantic.validate_call", "attrs.define",]
quote-annotations = false

[tool.ruff.lint.isort]
length-sort = true
order-by-type = true
lines-after-imports = 2
combine-as-imports = true
force-sort-within-sections = false
relative-imports-order = "closest-to-furthest"

[tool.ruff.lint.isort.sections]
"aea" = ["aea"]


[tool.ruff.lint.mccabe]
max-complexity = 12


[tool.ruff.lint.pep8-naming]
ignore-names = []
classmethod-decorators = [ "pydantic.validator", "declared_attr", "expression", "comparator",]
staticmethod-decorators = []

[tool.ruff.lint.pylint]
max-args = 6
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-nested-blocks = 4
max-positional-args = 6
max-public-methods = 20
max-returns = 6
max-statements = 50

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true


# Testing options
[tool.pytest.ini_options]
markers = [
    "integration: integration tests run with the `integration` marker",
]
addopts = "-m 'not integration' -p no:warnings"

